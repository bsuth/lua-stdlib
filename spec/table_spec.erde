local { table } = require('stl')

function array_sort(a, b) {
  if type(a) == type(b) {
    return a < b
  } else {
    return type(a) == 'number'
  }
}

function assert_array(expected, received) {
  -- Sort before asserting to ensure consistent order
  table.sort(expected, array_sort)
  table.sort(received, array_sort)
  assert.are.same(expected, received)
}

spec('default index to native table lib', () -> {
  assert.is_function(table.insert)
  assert.is_function(table.remove)
  assert.is_function(table.concat)
})

spec('assign', () -> {
  function assert_assign(expected, target, ...) {
    table.assign(target, ...)
    assert.are.same(expected, target)
  }

  assert_assign({}, {})
  assert_assign({ a = 1 }, {}, { a = 1 })
  assert_assign({ a = 2 }, {}, { a = 1 }, { a = 2 })
  assert_assign({ a = 1, b = 2 }, {}, { a = 1 }, { b = 2 })
  assert_assign({ a = 2 }, { a = 1 }, { a = 2 })
  assert_assign({ a = 1, b = 2 }, { a = 1 }, { b = 2 })
  assert_assign({ a = 1, b = 2, c = 3 }, { a = 1, c = 3 }, { b = 2 })
  assert_assign({ 1 }, { 1 })
  assert_assign({}, {}, { 1 })
})

spec('clone', () -> {
  function assert_clone(t, clone = table.clone(t)) {
    assert.are_not.equal(t, clone)
    assert.are.same(t, clone)

    for key, value in pairs(t) {
      if type(value) == 'table' {
        assert_clone(value, clone[key])
      }
    }
  }

  assert_clone({})
  assert_clone({ 1, 2, 3 })
  assert_clone({ a = 1, b = 2, c = 3 })
  assert_clone({ a = 1, 'hello' })
  assert_clone({ a = 1, b = 2, 'hello', 'world' })
  assert_clone({ { 'hello' } })
  assert_clone({ a = { 'hello' } })
  assert_clone({ a = { 'hello' }, { 'world' } })
})

spec('copy', () -> {
  function assert_copy(t) {
    local copy = table.copy(t)

    assert.are_not.equal(t, copy)
    assert.are.same(t, copy)

    for key, value in pairs(t) {
      assert.are.equal(value, copy[key])
    }
  }

  assert_copy({})
  assert_copy({ 1, 2, 3 })
  assert_copy({ a = 1, b = 2, c = 3 })
  assert_copy({ a = 1, 'hello' })
  assert_copy({ a = 1, b = 2, 'hello', 'world' })
  assert_copy({ { 'hello' } })
  assert_copy({ a = { 'hello' } })
  assert_copy({ a = { 'hello' }, { 'world' } })
})

spec('default', () -> {
  function assert_default(expected, target, ...) {
    table.default(target, ...)
    assert.are.same(expected, target)
  }

  assert_default({}, {})
  assert_default({ a = 1 }, {}, { a = 1 })
  assert_default({ a = 1 }, {}, { a = 1 }, { a = 2 })
  assert_default({ a = 1, b = 2 }, {}, { a = 1 }, { b = 2 })
  assert_default({ a = 1 }, { a = 1 }, { a = 2 })
  assert_default({ a = 1, b = 2 }, { a = 1 }, { b = 2 })
  assert_default({ a = 1, b = 2, c = 3 }, { a = 1, c = 3 }, { b = 2 })
  assert_default({ 1 }, { 1 })
  assert_default({}, {}, { 1 })
})

spec('filter', () -> {
  assert.are.same({}, table.filter({}, () -> false))
  assert.are.same({}, table.filter({}, () -> true))
  assert.are.same({}, table.filter({ 1, 2, 3 }, () -> false))
  assert.are.same({ 1, 2, 3 }, table.filter({ 1, 2, 3 }, () -> true))
  assert.are.same({}, table.filter({ a = 1, b = 2 }, () -> false))
  assert.are.same({ a = 1, b = 2 }, table.filter({ a = 1, b = 2 }, () -> true))
  assert.are.same({ 1, 2 }, table.filter({ 1, 2, 3 }, value -> value < 3))
  assert.are.same({ 3 }, table.filter({ 1, 2, 3 }, value -> value > 2))
  assert.are.same({ a = 1 }, table.filter({ a = 1, b = 2 }, value -> value < 2))
  assert.are.same({ b = 2 }, table.filter({ a = 1, b = 2 }, value -> value > 1))
  assert.are.same({ a = 1 }, table.filter({ a = 1, b = 2 }, (_, key) -> key == 'a'))
})

spec('find', () -> {
  function assert_find(expected_key, t, callback) {
    local value, key = table.find(t, callback)
    assert.are.equal(expected_key, key)
    assert.are.equal(t[expected_key], value)
  }

  assert_find(1, { 'a', 'b', 'c' }, 'a')
  assert_find(2, { 'a', 'b', 'c' }, 'b')
  assert_find(3, { 'a', 'b', 'c' }, 'c')
  assert_find(nil, { 'a', 'b', 'c' }, 'd')

  assert_find('a', { a = 'x', b = 'y', c = 'z' }, 'x')
  assert_find('b', { a = 'x', b = 'y', c = 'z' }, 'y')
  assert_find('c', { a = 'x', b = 'y', c = 'z' }, 'z')
  assert_find(nil, { a = 'x', b = 'y', c = 'z' }, 'w')

  assert_find(1, { 30, 20, 10 }, value -> value < 40)
  assert_find(2, { 30, 20, 10 }, value -> value < 30)
  assert_find(3, { 30, 20, 10 }, value -> value < 20)

  assert_find('a', { a = 10 }, value -> value < 20)
  assert_find(nil, { a = 20 }, value -> value < 20)
})

spec('keys', () -> {
  assert_array({}, table.keys({}))

  assert_array({ 1 }, table.keys({ 'a' }))
  assert_array({ 1, 2 }, table.keys({ 'a', 'b' }))

  assert_array({ 'a' }, table.keys({ a = 10 }))
  assert_array({ 'a', 'b' }, table.keys({ a = 10, b = 20 }))

  assert_array({ 1, 'b' }, table.keys({ 'a', b = 10 }))
})

spec('map', () -> {
  assert.are.same({}, table.map({}, value -> true))
  assert.are.same({}, table.map({ 1, 2, 3 }, value -> nil))

  assert.are.same({ 0, 10, 20 }, table.map({ 0, 1, 2 }, value -> 10 * value))
  assert.are.same({ a = 10, b = 20 }, table.map({ a = 1, b = 2 }, value -> 10 * value))

  assert.are.same({ a = 10 }, table.map({ 1 }, value -> (10 * value, 'a')))
  assert.are.same({ 10 }, table.map({ a = 1 }, value -> (10 * value, 1)))
  assert.are.same({ b = 10 }, table.map({ a = 10 }, value -> (value, 'b')))
})

spec('reduce', () -> {
  assert.are.equal(60, table.reduce({ 10, 20, 30 }, 0, (reduction, value) -> reduction + value))
  assert.are.equal(70, table.reduce({ 10, 20, 30 }, 10, (reduction, value) -> reduction + value))
  assert.are.equal(60, table.reduce({ a = 10, b = 20, c = 30 }, 0, (reduction, value) -> reduction + value))
  assert.are.equal(70, table.reduce({ a = 10, b = 20, c = 30 }, 10, (reduction, value) -> reduction + value))
})

spec('reverse', () -> {
  function assert_reverse(expected, t) {
    table.reverse(t)
    assert.are.same(expected, t)
  }

  assert_reverse({}, {})
  assert_reverse({ 'a' }, { 'a' })
  assert_reverse({ 'b', 'a' }, { 'a', 'b' })
  assert_reverse({ 'c', 'b', 'a' }, { 'a', 'b', 'c' })
  assert_reverse({ 'c', 'b', 'a', d = true }, { 'a', 'b', 'c', d = true })
})

spec('slice', () -> {
  assert.are.same({}, table.slice({}))
  assert.are.same({ 1, 2 }, table.slice({ 1, 2 }))
  assert.are.same({ 1, 2 }, table.slice({ 1, 2, a = 3 }))

  assert.are.same({ 'a', 'b', 'c' }, table.slice({ 'a', 'b', 'c' }, 1))
  assert.are.same({ 'b', 'c' }, table.slice({ 'a', 'b', 'c' }, 2))
  assert.are.same({ 'c' }, table.slice({ 'a', 'b', 'c' }, 3))

  assert.are.same({ 'c' }, table.slice({ 'a', 'b', 'c' }, -1))
  assert.are.same({ 'b', 'c' }, table.slice({ 'a', 'b', 'c' }, -2))
  assert.are.same({ 'a', 'b', 'c' }, table.slice({ 'a', 'b', 'c' }, -3))

  assert.are.same({ 'a' }, table.slice({ 'a', 'b', 'c' }, 1, 1))
  assert.are.same({ 'a', 'b' }, table.slice({ 'a', 'b', 'c' }, 1, 2))
  assert.are.same({ 'b' }, table.slice({ 'a', 'b', 'c' }, 2, 2))
  assert.are.same({ 'a', 'b', 'c' }, table.slice({ 'a', 'b', 'c' }, 1, 3))

  assert.are.same({ 'b', 'c' }, table.slice({ 'a', 'b', 'c' }, 2, -1))
  assert.are.same({ 'a', 'b', 'c' }, table.slice({ 'a', 'b', 'c' }, 1, -1))
  assert.are.same({ 'c' }, table.slice({ 'a', 'b', 'c' }, 3, -1))
  assert.are.same({ 'b', 'c' }, table.slice({ 'a', 'b', 'c' }, -2, 3))

  assert.are.same({}, table.slice({ 'a', 'b', 'c' }, 4))
})

spec('values', () -> {
  assert_array({}, table.values({}))

  assert_array({ 'a' }, table.values({ 'a' }))
  assert_array({ 'a', 'b' }, table.values({ 'a', 'b' }))

  assert_array({ 1 }, table.values({ a = 1 }))
  assert_array({ 1, 2 }, table.values({ a = 1, b = 2 }))

  assert_array({ 1, 'a' }, table.values({ 'a', b = 1 }))
})
