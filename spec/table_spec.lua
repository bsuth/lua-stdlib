local table
do
local __ERDE_TMP_2__
__ERDE_TMP_2__=
require(
(
'stl'
)
)
table = __ERDE_TMP_2__["table"]
end
function
array_sort
(a,b)
if
type(
a
)
==
type(
b
)
then
return
a
<
b
else
return
type(
a
)
==
(
'number'
)
end
end
function
assert_array
(expected,received)
table
.sort(
expected
,
array_sort
)
table
.sort(
received
,
array_sort
)
assert
.are
.same(
expected
,
received
)
end
spec(
(
'default index to native table lib'
)
,
function()
assert
.is_function(
table
.insert
)
assert
.is_function(
table
.remove
)
assert
.is_function(
table
.concat
)
end
)
spec(
(
'assign'
)
,
function()
function
assert_assign
(expected,target,...)
table
.assign(
target
,
...
)
assert
.are
.same(
expected
,
target
)
end
assert_assign(
{
}
,
{
}
)
assert_assign(
{
a=
1
,
}
,
{
}
,
{
a=
1
,
}
)
assert_assign(
{
a=
2
,
}
,
{
}
,
{
a=
1
,
}
,
{
a=
2
,
}
)
assert_assign(
{
a=
1
,
b=
2
,
}
,
{
}
,
{
a=
1
,
}
,
{
b=
2
,
}
)
assert_assign(
{
a=
2
,
}
,
{
a=
1
,
}
,
{
a=
2
,
}
)
assert_assign(
{
a=
1
,
b=
2
,
}
,
{
a=
1
,
}
,
{
b=
2
,
}
)
assert_assign(
{
a=
1
,
b=
2
,
c=
3
,
}
,
{
a=
1
,
c=
3
,
}
,
{
b=
2
,
}
)
assert_assign(
{
1
,
}
,
{
1
,
}
)
assert_assign(
{
}
,
{
}
,
{
1
,
}
)
end
)
spec(
(
'clone'
)
,
function()
function
assert_clone
(t,clone)
if clone == nil then clone = 
table
.clone(
t
)
end
assert
.are_not
.equal(
t
,
clone
)
assert
.are
.same(
t
,
clone
)
for
key
,
value
in
pairs(
t
)
do
if
type(
value
)
==
(
'table'
)
then
assert_clone(
value
,
clone
[
key
]
)
end
end
end
assert_clone(
{
}
)
assert_clone(
{
1
,
2
,
3
,
}
)
assert_clone(
{
a=
1
,
b=
2
,
c=
3
,
}
)
assert_clone(
{
a=
1
,
(
'hello'
)
,
}
)
assert_clone(
{
a=
1
,
b=
2
,
(
'hello'
)
,
(
'world'
)
,
}
)
assert_clone(
{
{
(
'hello'
)
,
}
,
}
)
assert_clone(
{
a=
{
(
'hello'
)
,
}
,
}
)
assert_clone(
{
a=
{
(
'hello'
)
,
}
,
{
(
'world'
)
,
}
,
}
)
end
)
spec(
(
'copy'
)
,
function()
function
assert_copy
(t)
local copy
=
table
.copy(
t
)
assert
.are_not
.equal(
t
,
copy
)
assert
.are
.same(
t
,
copy
)
for
key
,
value
in
pairs(
t
)
do
assert
.are
.equal(
value
,
copy
[
key
]
)
end
end
assert_copy(
{
}
)
assert_copy(
{
1
,
2
,
3
,
}
)
assert_copy(
{
a=
1
,
b=
2
,
c=
3
,
}
)
assert_copy(
{
a=
1
,
(
'hello'
)
,
}
)
assert_copy(
{
a=
1
,
b=
2
,
(
'hello'
)
,
(
'world'
)
,
}
)
assert_copy(
{
{
(
'hello'
)
,
}
,
}
)
assert_copy(
{
a=
{
(
'hello'
)
,
}
,
}
)
assert_copy(
{
a=
{
(
'hello'
)
,
}
,
{
(
'world'
)
,
}
,
}
)
end
)
spec(
(
'default'
)
,
function()
function
assert_default
(expected,target,...)
table
.default(
target
,
...
)
assert
.are
.same(
expected
,
target
)
end
assert_default(
{
}
,
{
}
)
assert_default(
{
a=
1
,
}
,
{
}
,
{
a=
1
,
}
)
assert_default(
{
a=
1
,
}
,
{
}
,
{
a=
1
,
}
,
{
a=
2
,
}
)
assert_default(
{
a=
1
,
b=
2
,
}
,
{
}
,
{
a=
1
,
}
,
{
b=
2
,
}
)
assert_default(
{
a=
1
,
}
,
{
a=
1
,
}
,
{
a=
2
,
}
)
assert_default(
{
a=
1
,
b=
2
,
}
,
{
a=
1
,
}
,
{
b=
2
,
}
)
assert_default(
{
a=
1
,
b=
2
,
c=
3
,
}
,
{
a=
1
,
c=
3
,
}
,
{
b=
2
,
}
)
assert_default(
{
1
,
}
,
{
1
,
}
)
assert_default(
{
}
,
{
}
,
{
1
,
}
)
end
)
spec(
(
'filter'
)
,
function()
assert
.are
.same(
{
}
,
table
.filter(
{
}
,
function()
return
false
end
)
)
assert
.are
.same(
{
}
,
table
.filter(
{
}
,
function()
return
true
end
)
)
assert
.are
.same(
{
}
,
table
.filter(
{
1
,
2
,
3
,
}
,
function()
return
false
end
)
)
assert
.are
.same(
{
1
,
2
,
3
,
}
,
table
.filter(
{
1
,
2
,
3
,
}
,
function()
return
true
end
)
)
assert
.are
.same(
{
}
,
table
.filter(
{
a=
1
,
b=
2
,
}
,
function()
return
false
end
)
)
assert
.are
.same(
{
a=
1
,
b=
2
,
}
,
table
.filter(
{
a=
1
,
b=
2
,
}
,
function()
return
true
end
)
)
assert
.are
.same(
{
1
,
2
,
}
,
table
.filter(
{
1
,
2
,
3
,
}
,
function(value)
return
value
<
3
end
)
)
assert
.are
.same(
{
3
,
}
,
table
.filter(
{
1
,
2
,
3
,
}
,
function(value)
return
value
>
2
end
)
)
assert
.are
.same(
{
a=
1
,
}
,
table
.filter(
{
a=
1
,
b=
2
,
}
,
function(value)
return
value
<
2
end
)
)
assert
.are
.same(
{
b=
2
,
}
,
table
.filter(
{
a=
1
,
b=
2
,
}
,
function(value)
return
value
>
1
end
)
)
assert
.are
.same(
{
a=
1
,
}
,
table
.filter(
{
a=
1
,
b=
2
,
}
,
function(_,key)
return
key
==
(
'a'
)
end
)
)
end
)
spec(
(
'find'
)
,
function()
function
assert_find
(expected_key,t,callback)
local value,key
=
table
.find(
t
,
callback
)
assert
.are
.equal(
expected_key
,
key
)
assert
.are
.equal(
t
[
expected_key
]
,
value
)
end
assert_find(
1
,
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
(
'a'
)
)
assert_find(
2
,
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
(
'b'
)
)
assert_find(
3
,
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
(
'c'
)
)
assert_find(
nil
,
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
(
'd'
)
)
assert_find(
(
'a'
)
,
{
a=
(
'x'
)
,
b=
(
'y'
)
,
c=
(
'z'
)
,
}
,
(
'x'
)
)
assert_find(
(
'b'
)
,
{
a=
(
'x'
)
,
b=
(
'y'
)
,
c=
(
'z'
)
,
}
,
(
'y'
)
)
assert_find(
(
'c'
)
,
{
a=
(
'x'
)
,
b=
(
'y'
)
,
c=
(
'z'
)
,
}
,
(
'z'
)
)
assert_find(
nil
,
{
a=
(
'x'
)
,
b=
(
'y'
)
,
c=
(
'z'
)
,
}
,
(
'w'
)
)
assert_find(
1
,
{
30
,
20
,
10
,
}
,
function(value)
return
value
<
40
end
)
assert_find(
2
,
{
30
,
20
,
10
,
}
,
function(value)
return
value
<
30
end
)
assert_find(
3
,
{
30
,
20
,
10
,
}
,
function(value)
return
value
<
20
end
)
assert_find(
(
'a'
)
,
{
a=
10
,
}
,
function(value)
return
value
<
20
end
)
assert_find(
nil
,
{
a=
20
,
}
,
function(value)
return
value
<
20
end
)
end
)
spec(
(
'keys'
)
,
function()
assert_array(
{
}
,
table
.keys(
{
}
)
)
assert_array(
{
1
,
}
,
table
.keys(
{
(
'a'
)
,
}
)
)
assert_array(
{
1
,
2
,
}
,
table
.keys(
{
(
'a'
)
,
(
'b'
)
,
}
)
)
assert_array(
{
(
'a'
)
,
}
,
table
.keys(
{
a=
10
,
}
)
)
assert_array(
{
(
'a'
)
,
(
'b'
)
,
}
,
table
.keys(
{
a=
10
,
b=
20
,
}
)
)
assert_array(
{
1
,
(
'b'
)
,
}
,
table
.keys(
{
(
'a'
)
,
b=
10
,
}
)
)
end
)
spec(
(
'map'
)
,
function()
assert
.are
.same(
{
}
,
table
.map(
{
}
,
function(value)
return
true
end
)
)
assert
.are
.same(
{
}
,
table
.map(
{
1
,
2
,
3
,
}
,
function(value)
return
nil
end
)
)
assert
.are
.same(
{
0
,
10
,
20
,
}
,
table
.map(
{
0
,
1
,
2
,
}
,
function(value)
return
10
*
value
end
)
)
assert
.are
.same(
{
a=
10
,
b=
20
,
}
,
table
.map(
{
a=
1
,
b=
2
,
}
,
function(value)
return
10
*
value
end
)
)
assert
.are
.same(
{
a=
10
,
}
,
table
.map(
{
1
,
}
,
function(value)
return
10
*
value
,
(
'a'
)
end
)
)
assert
.are
.same(
{
10
,
}
,
table
.map(
{
a=
1
,
}
,
function(value)
return
10
*
value
,
1
end
)
)
assert
.are
.same(
{
b=
10
,
}
,
table
.map(
{
a=
10
,
}
,
function(value)
return
value
,
(
'b'
)
end
)
)
end
)
spec(
(
'reduce'
)
,
function()
assert
.are
.equal(
60
,
table
.reduce(
{
10
,
20
,
30
,
}
,
0
,
function(reduction,value)
return
reduction
+
value
end
)
)
assert
.are
.equal(
70
,
table
.reduce(
{
10
,
20
,
30
,
}
,
10
,
function(reduction,value)
return
reduction
+
value
end
)
)
assert
.are
.equal(
60
,
table
.reduce(
{
a=
10
,
b=
20
,
c=
30
,
}
,
0
,
function(reduction,value)
return
reduction
+
value
end
)
)
assert
.are
.equal(
70
,
table
.reduce(
{
a=
10
,
b=
20
,
c=
30
,
}
,
10
,
function(reduction,value)
return
reduction
+
value
end
)
)
end
)
spec(
(
'reverse'
)
,
function()
function
assert_reverse
(expected,t)
table
.reverse(
t
)
assert
.are
.same(
expected
,
t
)
end
assert_reverse(
{
}
,
{
}
)
assert_reverse(
{
(
'a'
)
,
}
,
{
(
'a'
)
,
}
)
assert_reverse(
{
(
'b'
)
,
(
'a'
)
,
}
,
{
(
'a'
)
,
(
'b'
)
,
}
)
assert_reverse(
{
(
'c'
)
,
(
'b'
)
,
(
'a'
)
,
}
,
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
)
assert_reverse(
{
(
'c'
)
,
(
'b'
)
,
(
'a'
)
,
d=
true
,
}
,
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
d=
true
,
}
)
end
)
spec(
(
'slice'
)
,
function()
assert
.are
.same(
{
}
,
table
.slice(
{
}
)
)
assert
.are
.same(
{
1
,
2
,
}
,
table
.slice(
{
1
,
2
,
}
)
)
assert
.are
.same(
{
1
,
2
,
}
,
table
.slice(
{
1
,
2
,
a=
3
,
}
)
)
assert
.are
.same(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
1
)
)
assert
.are
.same(
{
(
'b'
)
,
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
2
)
)
assert
.are
.same(
{
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
3
)
)
assert
.are
.same(
{
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
-
1
)
)
assert
.are
.same(
{
(
'b'
)
,
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
-
2
)
)
assert
.are
.same(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
-
3
)
)
assert
.are
.same(
{
(
'a'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
1
,
1
)
)
assert
.are
.same(
{
(
'a'
)
,
(
'b'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
1
,
2
)
)
assert
.are
.same(
{
(
'b'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
2
,
2
)
)
assert
.are
.same(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
1
,
3
)
)
assert
.are
.same(
{
(
'b'
)
,
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
2
,
-
1
)
)
assert
.are
.same(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
1
,
-
1
)
)
assert
.are
.same(
{
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
3
,
-
1
)
)
assert
.are
.same(
{
(
'b'
)
,
(
'c'
)
,
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
-
2
,
3
)
)
assert
.are
.same(
{
}
,
table
.slice(
{
(
'a'
)
,
(
'b'
)
,
(
'c'
)
,
}
,
4
)
)
end
)
spec(
(
'values'
)
,
function()
assert_array(
{
}
,
table
.values(
{
}
)
)
assert_array(
{
(
'a'
)
,
}
,
table
.values(
{
(
'a'
)
,
}
)
)
assert_array(
{
(
'a'
)
,
(
'b'
)
,
}
,
table
.values(
{
(
'a'
)
,
(
'b'
)
,
}
)
)
assert_array(
{
1
,
}
,
table
.values(
{
a=
1
,
}
)
)
assert_array(
{
1
,
2
,
}
,
table
.values(
{
a=
1
,
b=
2
,
}
)
)
assert_array(
{
1
,
(
'a'
)
,
}
,
table
.values(
{
(
'a'
)
,
b=
1
,
}
)
)
end
)
-- Compiled with Erde 0.6.0-1
-- __ERDE_COMPILED__