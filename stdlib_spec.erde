local stdlib = require('stdlib')

-- busted loads penlight's `compat` module, which injects its own `table.pack`
-- and `table.unpack` polyfills. We unset them here to make sure they don't
-- interfere with our tests.
if _VERSION == 'Lua 5.1' {
  table.pack = nil
  table.unpack = nil
}

-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local function any_sort(a, b) {
  if type(a) == type(b) {
    return a < b
  } else {
    return type(a) < type(b)
  }
}

-- -----------------------------------------------------------------------------
-- Load / Unload
-- -----------------------------------------------------------------------------

spec('load / unload', () -> {
  local function assert_loaded(library_name) {
    for key in pairs(stdlib[library_name]) {
      assert.are.equal(_G[library_name][key], stdlib[library_name][key])
    }
  }

  local function assert_unloaded(library_name) {
    for key in pairs(stdlib[library_name]) {
      assert.is_nil(_G[library_name][key])
    }
  }

  assert_unloaded('coroutine')
  assert_unloaded('debug')
  assert_unloaded('io')
  assert_unloaded('math')
  assert_unloaded('os')
  assert_unloaded('package')
  assert_unloaded('string')
  assert_unloaded('table')

  stdlib.load()

  -- make sure `load` and `unload` themselves are not injected
  assert.are_not.equal(_G.load, stdlib.load)
  assert.are_not.equal(_G.unload, stdlib.unload)

  -- globals
  assert.are.equal(_G.kpairs, stdlib.kpairs)

  -- libraries
  assert_loaded('coroutine')
  assert_loaded('debug')
  assert_loaded('io')
  assert_loaded('math')
  assert_loaded('os')
  assert_loaded('package')
  assert_loaded('string')
  assert_loaded('table')

  stdlib.unload()

  assert_unloaded('coroutine')
  assert_unloaded('debug')
  assert_unloaded('io')
  assert_unloaded('math')
  assert_unloaded('os')
  assert_unloaded('package')
  assert_unloaded('string')
  assert_unloaded('table')
})

-- -----------------------------------------------------------------------------
-- Globals
-- -----------------------------------------------------------------------------

spec('kpairs', () -> {
  local function assert_kpairs(expected, t) {
    local result = {}

    for key, value in stdlib.kpairs(t) {
      result[key] = value
    }

    assert.are.same(expected, result)
  }

  assert_kpairs({}, {})
  assert_kpairs({}, { 'hello', 'world' })
  assert_kpairs(
    { mykey = 'hello', myotherkey = 'world' },
    { mykey = 'hello', myotherkey = 'world' },
  )
  assert_kpairs(
    { mykey = 'hello', myotherkey = 'world' },
    { mykey = 'hello', myotherkey = 'world', 'hello', 'world' },
  )
})

-- -----------------------------------------------------------------------------
-- Coroutine
-- -----------------------------------------------------------------------------

spec('coroutine', () -> {
  assert.is_table(stdlib.coroutine)
  for key in pairs(coroutine) { -- make sure we are not overriding native methods
    assert.are.equal(coroutine[key], stdlib.coroutine[key])
  }
})

-- -----------------------------------------------------------------------------
-- Debug
-- -----------------------------------------------------------------------------

spec('debug', () -> {
  assert.is_table(stdlib.debug)
  for key in pairs(debug) { -- make sure we are not overriding native methods
    assert.are.equal(debug[key], stdlib.debug[key])
  }
})

-- -----------------------------------------------------------------------------
-- IO
-- -----------------------------------------------------------------------------

spec('io', () -> {
  assert.is_table(stdlib.io)
  for key in pairs(io) { -- make sure we are not overriding native methods
    assert.are.equal(io[key], stdlib.io[key])
  }
})

-- -----------------------------------------------------------------------------
-- Math
-- -----------------------------------------------------------------------------

spec('math', () -> {
  assert.is_table(stdlib.math)
  for key in pairs(math) { -- make sure we are not overriding native methods
    assert.are.equal(math[key], stdlib.math[key])
  }
})

spec('math.clamp', () -> {
  assert.are.equal(0, stdlib.math.clamp(0, 0, 1))
  assert.are.equal(0.5, stdlib.math.clamp(0.5, 0, 1))
  assert.are.equal(0, stdlib.math.clamp(-0.5, 0, 1))
  assert.are.equal(1, stdlib.math.clamp(1.5, 0, 1))
})

spec('math.round', () -> {
  assert.are.equal(-1, stdlib.math.round(-1))
  assert.are.equal(-1, stdlib.math.round(-0.9))
  assert.are.equal(-1, stdlib.math.round(-0.51))
  assert.are.equal(-1, stdlib.math.round(-0.5))
  assert.are.equal(0, stdlib.math.round(-0.49))
  assert.are.equal(0, stdlib.math.round(-0.1))
  assert.are.equal(0, stdlib.math.round(0))
  assert.are.equal(0, stdlib.math.round(0.1))
  assert.are.equal(0, stdlib.math.round(0.49))
  assert.are.equal(1, stdlib.math.round(0.5))
  assert.are.equal(1, stdlib.math.round(0.51))
  assert.are.equal(1, stdlib.math.round(0.9))
  assert.are.equal(1, stdlib.math.round(1))
})

spec('math.sign', () -> {
  assert.are.equal(-1, stdlib.math.sign(-3))
  assert.are.equal(-1, stdlib.math.sign(-1))
  assert.are.equal(0, stdlib.math.sign(0))
  assert.are.equal(1, stdlib.math.sign(1))
  assert.are.equal(1, stdlib.math.sign(4))
})

-- -----------------------------------------------------------------------------
-- OS
-- -----------------------------------------------------------------------------

spec('os', () -> {
  assert.is_table(stdlib.os)
  for key in pairs(os) { -- make sure we are not overriding native methods
    assert.are.equal(os[key], stdlib.os[key])
  }
})

-- -----------------------------------------------------------------------------
-- Package
-- -----------------------------------------------------------------------------

spec('package', () -> {
  assert.is_table(stdlib.package)
  for key in pairs(package) { -- make sure we are not overriding native methods
    assert.are.equal(package[key], stdlib.package[key])
  }
})

-- -----------------------------------------------------------------------------
-- String
-- -----------------------------------------------------------------------------

spec('string', () -> {
  assert.is_table(stdlib.string)
  for key in pairs(string) { -- make sure we are not overriding native methods
    assert.are.equal(string[key], stdlib.string[key])
  }
})

spec('string.escape', () -> {
  assert.are.equal('a', stdlib.string.escape('a'))
  assert.are.equal('1', stdlib.string.escape('1'))
  assert.are.equal(',', stdlib.string.escape(','))

  assert.are.equal('%%', stdlib.string.escape('%'))
  assert.are.equal('%(', stdlib.string.escape('('))
  assert.are.equal('%)', stdlib.string.escape(')'))
  assert.are.equal('%.', stdlib.string.escape('.'))
  assert.are.equal('%*', stdlib.string.escape('*'))
  assert.are.equal('%?', stdlib.string.escape('?'))
  assert.are.equal('%[', stdlib.string.escape('['))
  assert.are.equal('%^', stdlib.string.escape('^'))
  assert.are.equal('%$', stdlib.string.escape('$'))
  assert.are.equal('%+', stdlib.string.escape('+'))
  assert.are.equal('%-', stdlib.string.escape('-'))

  assert.are.equal('a%%', stdlib.string.escape('a%'))
  assert.are.equal('a%(', stdlib.string.escape('a('))
  assert.are.equal('a%)', stdlib.string.escape('a)'))
  assert.are.equal('a%.', stdlib.string.escape('a.'))
  assert.are.equal('a%*', stdlib.string.escape('a*'))
  assert.are.equal('a%?', stdlib.string.escape('a?'))
  assert.are.equal('a%[', stdlib.string.escape('a['))
  assert.are.equal('a%^', stdlib.string.escape('a^'))
  assert.are.equal('a%$', stdlib.string.escape('a$'))
  assert.are.equal('a%+', stdlib.string.escape('a+'))
  assert.are.equal('a%-', stdlib.string.escape('a-'))

  assert.are.equal('%%', stdlib.string.escape('%%'))
  assert.are.equal('%(', stdlib.string.escape('%('))
  assert.are.equal('%)', stdlib.string.escape('%)'))
  assert.are.equal('%.', stdlib.string.escape('%.'))
  assert.are.equal('%*', stdlib.string.escape('%*'))
  assert.are.equal('%?', stdlib.string.escape('%?'))
  assert.are.equal('%[', stdlib.string.escape('%['))
  assert.are.equal('%^', stdlib.string.escape('%^'))
  assert.are.equal('%$', stdlib.string.escape('%$'))
  assert.are.equal('%+', stdlib.string.escape('%+'))
  assert.are.equal('%-', stdlib.string.escape('%-'))

  assert.are.equal('%%%(', stdlib.string.escape('%%('))
  assert.are.equal('%(%%', stdlib.string.escape('(%%'))
  assert.are.equal('%%%%', stdlib.string.escape('%%%%'))
  assert.are.equal('%%%(%%', stdlib.string.escape('%%(%%'))
})

spec('string.lpad', () -> {
  assert.are.equal('bbbbb', stdlib.string.lpad('', 5, 'b'))
  assert.are.equal('bbbba', stdlib.string.lpad('a', 5, 'b'))
  assert.are.equal('bbbaa', stdlib.string.lpad('aa', 5, 'b'))
  assert.are.equal('bbaaa', stdlib.string.lpad('aaa', 5, 'b'))
  assert.are.equal('baaaa', stdlib.string.lpad('aaaa', 5, 'b'))
  assert.are.equal('aaaaa', stdlib.string.lpad('aaaaa', 5, 'b'))
  assert.are.equal('aaaaaa', stdlib.string.lpad('aaaaaa', 5, 'b'))

  assert.are.equal('bbbbbb', stdlib.string.lpad('', 5, 'bb'))
  assert.are.equal('bbbba', stdlib.string.lpad('a', 5, 'bb'))
  assert.are.equal('bbbbaa', stdlib.string.lpad('aa', 5, 'bb'))
  assert.are.equal('bbaaa', stdlib.string.lpad('aaa', 5, 'bb'))
  assert.are.equal('bbaaaa', stdlib.string.lpad('aaaa', 5, 'bb'))
  assert.are.equal('aaaaa', stdlib.string.lpad('aaaaa', 5, 'bb'))
  assert.are.equal('aaaaaa', stdlib.string.lpad('aaaaaa', 5, 'bb'))
})

spec('string.ltrim', () -> {
  assert.are.equal('hello', stdlib.string.ltrim('hello'))

  assert.are.equal('hello ', stdlib.string.ltrim('hello '))
  assert.are.equal('hello', stdlib.string.ltrim(' hello'))
  assert.are.equal('hello ', stdlib.string.ltrim(' hello '))
  assert.are.equal('hello  ', stdlib.string.ltrim('hello  '))
  assert.are.equal('hello', stdlib.string.ltrim('  hello'))
  assert.are.equal('hello  ', stdlib.string.ltrim('  hello  '))

  assert.are.equal('hello\t', stdlib.string.ltrim('hello\t'))
  assert.are.equal('hello', stdlib.string.ltrim('\thello'))
  assert.are.equal('hello\t', stdlib.string.ltrim('\thello\t'))
  assert.are.equal('hello\t\t', stdlib.string.ltrim('hello\t\t'))
  assert.are.equal('hello', stdlib.string.ltrim('\t\thello'))
  assert.are.equal('hello\t\t', stdlib.string.ltrim('\t\thello\t\t'))

  assert.are.equal('hello\n', stdlib.string.ltrim('hello\n'))
  assert.are.equal('hello', stdlib.string.ltrim('\nhello'))
  assert.are.equal('hello\n', stdlib.string.ltrim('\nhello\n'))
  assert.are.equal('hello\n\n', stdlib.string.ltrim('hello\n\n'))
  assert.are.equal('hello', stdlib.string.ltrim('\n\nhello'))
  assert.are.equal('hello\n\n', stdlib.string.ltrim('\n\nhello\n\n'))

  assert.are.equal('hello\t\n', stdlib.string.ltrim('hello\t\n'))
  assert.are.equal('hello', stdlib.string.ltrim('\t\nhello'))
  assert.are.equal('hello\t\n', stdlib.string.ltrim('\t\nhello\t\n'))

  assert.are.equal('hellox', stdlib.string.ltrim('hellox', 'x+'))
  assert.are.equal('hello', stdlib.string.ltrim('xhello', 'x+'))
  assert.are.equal('hellox', stdlib.string.ltrim('xhellox', 'x+'))
  assert.are.equal('helloxx', stdlib.string.ltrim('helloxx', 'x+'))
  assert.are.equal('hello', stdlib.string.ltrim('xxhello', 'x+'))
  assert.are.equal('helloxx', stdlib.string.ltrim('xxhelloxx', 'x+'))
})

spec('string.pad', () -> {
  assert.are.equal('bbbbbb', stdlib.string.pad('', 5, 'b'))
  assert.are.equal('bbabb', stdlib.string.pad('a', 5, 'b'))
  assert.are.equal('bbaabb', stdlib.string.pad('aa', 5, 'b'))
  assert.are.equal('baaab', stdlib.string.pad('aaa', 5, 'b'))
  assert.are.equal('baaaab', stdlib.string.pad('aaaa', 5, 'b'))
  assert.are.equal('aaaaa', stdlib.string.pad('aaaaa', 5, 'b'))
  assert.are.equal('aaaaaa', stdlib.string.pad('aaaaaa', 5, 'b'))

  assert.are.equal('bbbbbbbb', stdlib.string.pad('', 5, 'bb'))
  assert.are.equal('bbabb', stdlib.string.pad('a', 5, 'bb'))
  assert.are.equal('bbaabb', stdlib.string.pad('aa', 5, 'bb'))
  assert.are.equal('bbaaabb', stdlib.string.pad('aaa', 5, 'bb'))
  assert.are.equal('bbaaaabb', stdlib.string.pad('aaaa', 5, 'bb'))
  assert.are.equal('aaaaa', stdlib.string.pad('aaaaa', 5, 'bb'))
  assert.are.equal('aaaaaa', stdlib.string.pad('aaaaaa', 5, 'bb'))
})

spec('string.rpad', () -> {
  assert.are.equal('bbbbb', stdlib.string.rpad('', 5, 'b'))
  assert.are.equal('abbbb', stdlib.string.rpad('a', 5, 'b'))
  assert.are.equal('aabbb', stdlib.string.rpad('aa', 5, 'b'))
  assert.are.equal('aaabb', stdlib.string.rpad('aaa', 5, 'b'))
  assert.are.equal('aaaab', stdlib.string.rpad('aaaa', 5, 'b'))
  assert.are.equal('aaaaa', stdlib.string.rpad('aaaaa', 5, 'b'))
  assert.are.equal('aaaaaa', stdlib.string.rpad('aaaaaa', 5, 'b'))

  assert.are.equal('bbbbbb', stdlib.string.rpad('', 5, 'bb'))
  assert.are.equal('abbbb', stdlib.string.rpad('a', 5, 'bb'))
  assert.are.equal('aabbbb', stdlib.string.rpad('aa', 5, 'bb'))
  assert.are.equal('aaabb', stdlib.string.rpad('aaa', 5, 'bb'))
  assert.are.equal('aaaabb', stdlib.string.rpad('aaaa', 5, 'bb'))
  assert.are.equal('aaaaa', stdlib.string.rpad('aaaaa', 5, 'bb'))
  assert.are.equal('aaaaaa', stdlib.string.rpad('aaaaaa', 5, 'bb'))
})

spec('string.rtrim', () -> {
  assert.are.equal('hello', stdlib.string.rtrim('hello'))

  assert.are.equal('hello', stdlib.string.rtrim('hello '))
  assert.are.equal(' hello', stdlib.string.rtrim(' hello'))
  assert.are.equal(' hello', stdlib.string.rtrim(' hello '))
  assert.are.equal('hello', stdlib.string.rtrim('hello  '))
  assert.are.equal('  hello', stdlib.string.rtrim('  hello'))
  assert.are.equal('  hello', stdlib.string.rtrim('  hello  '))

  assert.are.equal('hello', stdlib.string.rtrim('hello\t'))
  assert.are.equal('\thello', stdlib.string.rtrim('\thello'))
  assert.are.equal('\thello', stdlib.string.rtrim('\thello\t'))
  assert.are.equal('hello', stdlib.string.rtrim('hello\t\t'))
  assert.are.equal('\t\thello', stdlib.string.rtrim('\t\thello'))
  assert.are.equal('\t\thello', stdlib.string.rtrim('\t\thello\t\t'))

  assert.are.equal('hello', stdlib.string.rtrim('hello\n'))
  assert.are.equal('\nhello', stdlib.string.rtrim('\nhello'))
  assert.are.equal('\nhello', stdlib.string.rtrim('\nhello\n'))
  assert.are.equal('hello', stdlib.string.rtrim('hello\n\n'))
  assert.are.equal('\n\nhello', stdlib.string.rtrim('\n\nhello'))
  assert.are.equal('\n\nhello', stdlib.string.rtrim('\n\nhello\n\n'))

  assert.are.equal('hello', stdlib.string.rtrim('hello\t\n'))
  assert.are.equal('\t\nhello', stdlib.string.rtrim('\t\nhello'))
  assert.are.equal('\t\nhello', stdlib.string.rtrim('\t\nhello\t\n'))

  assert.are.equal('hello', stdlib.string.rtrim('hellox', 'x+'))
  assert.are.equal('xhello', stdlib.string.rtrim('xhello', 'x+'))
  assert.are.equal('xhello', stdlib.string.rtrim('xhellox', 'x+'))
  assert.are.equal('hello', stdlib.string.rtrim('helloxx', 'x+'))
  assert.are.equal('xxhello', stdlib.string.rtrim('xxhello', 'x+'))
  assert.are.equal('xxhello', stdlib.string.rtrim('xxhelloxx', 'x+'))
})

spec('string.split', () -> {
  assert.are.same({ 'a', 'b', 'c' }, stdlib.string.split('a b c'))
  assert.are.same({ 'a', 'b', 'c' }, stdlib.string.split('a  b \tc'))

  assert.are.same({ '', 'a' }, stdlib.string.split(' a'))
  assert.are.same({ 'a', '' }, stdlib.string.split('a '))
  assert.are.same({ '', 'a', '' }, stdlib.string.split(' a '))

  assert.are.same({ ' ', ' ' }, stdlib.string.split(' a ', '%a+'))
  assert.are.same({ 'hello', 'world' }, stdlib.string.split('hello11world', '%d+'))
})

spec('string.trim', () -> {
  assert.are.equal('hello', stdlib.string.trim('hello'))

  assert.are.equal('hello', stdlib.string.trim('hello '))
  assert.are.equal('hello', stdlib.string.trim(' hello'))
  assert.are.equal('hello', stdlib.string.trim(' hello '))
  assert.are.equal('hello', stdlib.string.trim('hello  '))
  assert.are.equal('hello', stdlib.string.trim('  hello'))
  assert.are.equal('hello', stdlib.string.trim('  hello  '))

  assert.are.equal('hello', stdlib.string.trim('hello\t'))
  assert.are.equal('hello', stdlib.string.trim('\thello'))
  assert.are.equal('hello', stdlib.string.trim('\thello\t'))
  assert.are.equal('hello', stdlib.string.trim('hello\t\t'))
  assert.are.equal('hello', stdlib.string.trim('\t\thello'))
  assert.are.equal('hello', stdlib.string.trim('\t\thello\t\t'))

  assert.are.equal('hello', stdlib.string.trim('hello\n'))
  assert.are.equal('hello', stdlib.string.trim('\nhello'))
  assert.are.equal('hello', stdlib.string.trim('\nhello\n'))
  assert.are.equal('hello', stdlib.string.trim('hello\n\n'))
  assert.are.equal('hello', stdlib.string.trim('\n\nhello'))
  assert.are.equal('hello', stdlib.string.trim('\n\nhello\n\n'))

  assert.are.equal('hello', stdlib.string.trim('hello\t\n'))
  assert.are.equal('hello', stdlib.string.trim('\t\nhello'))
  assert.are.equal('hello', stdlib.string.trim('\t\nhello\t\n'))

  assert.are.equal('hello', stdlib.string.trim('hellox', 'x+'))
  assert.are.equal('hello', stdlib.string.trim('xhello', 'x+'))
  assert.are.equal('hello', stdlib.string.trim('xhellox', 'x+'))
  assert.are.equal('hello', stdlib.string.trim('helloxx', 'x+'))
  assert.are.equal('hello', stdlib.string.trim('xxhello', 'x+'))
  assert.are.equal('hello', stdlib.string.trim('xxhelloxx', 'x+'))
})

-- -----------------------------------------------------------------------------
-- Table
-- -----------------------------------------------------------------------------

spec('table', () -> {
  assert.is_table(stdlib.table)
  for key in pairs(table) { -- make sure we are not overriding native methods
    assert.are.equal(table[key], stdlib.table[key])
  }
})

spec('table.assign', () -> {
  local function assert_assign(expected, target, ...) {
    stdlib.table.assign(target, ...)
    assert.are.same(expected, target)
  }

  assert_assign({}, {})
  assert_assign({ a = 1 }, {}, { a = 1 })
  assert_assign({ a = 2 }, {}, { a = 1 }, { a = 2 })
  assert_assign({ a = 1, b = 2 }, {}, { a = 1 }, { b = 2 })
  assert_assign({ a = 2 }, { a = 1 }, { a = 2 })
  assert_assign({ a = 1, b = 2 }, { a = 1 }, { b = 2 })
  assert_assign({ a = 1, b = 2, c = 3 }, { a = 1, c = 3 }, { b = 2 })
  assert_assign({ 1 }, { 1 })
  assert_assign({}, {}, { 1 })
})

spec('table.deepcopy', () -> {
  local function assert_deepcopy(t, copy = stdlib.table.deepcopy(t)) {
    assert.are_not.equal(t, copy)
    assert.are.same(t, copy)

    for key, value in pairs(t) {
      if type(value) == 'table' {
        assert_deepcopy(value, copy[key])
      }
    }
  }

  assert_deepcopy({})
  assert_deepcopy({ 1, 2, 3 })
  assert_deepcopy({ a = 1, b = 2, c = 3 })
  assert_deepcopy({ a = 1, 'hello' })
  assert_deepcopy({ a = 1, b = 2, 'hello', 'world' })
  assert_deepcopy({ { 'hello' } })
  assert_deepcopy({ a = { 'hello' } })
  assert_deepcopy({ a = { 'hello' }, { 'world' } })
})

spec('table.default', () -> {
  local function assert_default(expected, target, ...) {
    stdlib.table.default(target, ...)
    assert.are.same(expected, target)
  }

  assert_default({}, {})
  assert_default({ a = 1 }, {}, { a = 1 })
  assert_default({ a = 1 }, {}, { a = 1 }, { a = 2 })
  assert_default({ a = 1, b = 2 }, {}, { a = 1 }, { b = 2 })
  assert_default({ a = 1 }, { a = 1 }, { a = 2 })
  assert_default({ a = 1, b = 2 }, { a = 1 }, { b = 2 })
  assert_default({ a = 1, b = 2, c = 3 }, { a = 1, c = 3 }, { b = 2 })
  assert_default({ 1 }, { 1 })
  assert_default({}, {}, { 1 })
})

spec('table.empty', () -> {
  assert.are.equal(true, stdlib.table.empty({}))
  assert.are.equal(true, stdlib.table.empty({ nil }))
  assert.are.equal(true, stdlib.table.empty({ a = nil }))

  assert.are.equal(false, stdlib.table.empty({ a = 1 }))
  assert.are.equal(false, stdlib.table.empty({ 1 }))
})

spec('table.filter', () -> {
  assert.are.same({}, stdlib.table.filter({}, () -> false))
  assert.are.same({}, stdlib.table.filter({}, () -> true))
  assert.are.same({}, stdlib.table.filter({ 1, 2, 3 }, () -> false))
  assert.are.same({ 1, 2, 3 }, stdlib.table.filter({ 1, 2, 3 }, () -> true))
  assert.are.same({}, stdlib.table.filter({ a = 1, b = 2 }, () -> false))
  assert.are.same({ a = 1, b = 2 }, stdlib.table.filter({ a = 1, b = 2 }, () -> true))
  assert.are.same({ 1, 2 }, stdlib.table.filter({ 1, 2, 3 }, value -> value < 3))
  assert.are.same({ 3 }, stdlib.table.filter({ 1, 2, 3 }, value -> value > 2))
  assert.are.same({ a = 1 }, stdlib.table.filter({ a = 1, b = 2 }, value -> value < 2))
  assert.are.same({ b = 2 }, stdlib.table.filter({ a = 1, b = 2 }, value -> value > 1))
  assert.are.same({ a = 1 }, stdlib.table.filter({ a = 1, b = 2 }, (_, key) -> key == 'a'))
})

spec('table.find', () -> {
  local function assert_find(expected_key, t, callback) {
    local value, key = stdlib.table.find(t, callback)
    assert.are.equal(expected_key, key)
    assert.are.equal(t[expected_key], value)
  }

  assert_find(1, { 'a', 'b', 'c' }, 'a')
  assert_find(2, { 'a', 'b', 'c' }, 'b')
  assert_find(3, { 'a', 'b', 'c' }, 'c')
  assert_find(nil, { 'a', 'b', 'c' }, 'd')

  assert_find('a', { a = 'x', b = 'y', c = 'z' }, 'x')
  assert_find('b', { a = 'x', b = 'y', c = 'z' }, 'y')
  assert_find('c', { a = 'x', b = 'y', c = 'z' }, 'z')
  assert_find(nil, { a = 'x', b = 'y', c = 'z' }, 'w')

  assert_find(1, { 30, 20, 10 }, value -> value < 40)
  assert_find(2, { 30, 20, 10 }, value -> value < 30)
  assert_find(3, { 30, 20, 10 }, value -> value < 20)

  assert_find('a', { a = 10 }, value -> value < 20)
  assert_find(nil, { a = 20 }, value -> value < 20)
})

spec('table.keys', () -> {
  local function assert_keys(expected, t) {
    local keys = stdlib.table.keys(t)
    table.sort(expected, any_sort)
    table.sort(keys, any_sort)
    assert.are.same(expected, keys)
  }

  assert_keys({}, {})
  assert_keys({ 1 }, { 'a' })
  assert_keys({ 1, 2 }, { 'a', 'b' })
  assert_keys({ 'a' }, { a = 10 })
  assert_keys({ 'a', 'b' }, { a = 10, b = 20 })
  assert_keys({ 1, 'b' }, { 'a', b = 10 })
})

spec('table.map', () -> {
  assert.are.same({}, stdlib.table.map({}, value -> true))
  assert.are.same({}, stdlib.table.map({ 1, 2, 3 }, value -> nil))

  assert.are.same({ 0, 10, 20 }, stdlib.table.map({ 0, 1, 2 }, value -> 10 * value))
  assert.are.same({ a = 10, b = 20 }, stdlib.table.map({ a = 1, b = 2 }, value -> 10 * value))

  assert.are.same({ a = 10 }, stdlib.table.map({ 1 }, value -> (10 * value, 'a')))
  assert.are.same({ 10 }, stdlib.table.map({ a = 1 }, value -> (10 * value, 1)))
  assert.are.same({ b = 10 }, stdlib.table.map({ a = 10 }, value -> (value, 'b')))
})

spec('table.reduce', () -> {
  assert.are.equal(60, stdlib.table.reduce({ 10, 20, 30 }, 0, (reduction, value) -> reduction + value))
  assert.are.equal(70, stdlib.table.reduce({ 10, 20, 30 }, 10, (reduction, value) -> reduction + value))
  assert.are.equal(60, stdlib.table.reduce({ a = 10, b = 20, c = 30 }, 0, (reduction, value) -> reduction + value))
  assert.are.equal(70, stdlib.table.reduce({ a = 10, b = 20, c = 30 }, 10, (reduction, value) -> reduction + value))
})

spec('table.reverse', () -> {
  local function assert_reverse(expected, t) {
    stdlib.table.reverse(t)
    assert.are.same(expected, t)
  }

  assert_reverse({}, {})
  assert_reverse({ 'a' }, { 'a' })
  assert_reverse({ 'b', 'a' }, { 'a', 'b' })
  assert_reverse({ 'c', 'b', 'a' }, { 'a', 'b', 'c' })
  assert_reverse({ 'c', 'b', 'a', d = true }, { 'a', 'b', 'c', d = true })
})

spec('table.pack', () -> {
  if _VERSION == 'Lua 5.1' {
    assert.are.same({ n = 0 }, stdlib.table.pack())
    assert.are.same({ n = 1, 10 }, stdlib.table.pack(10))
    assert.are.same({ n = 3, 10, 30, 20 }, stdlib.table.pack(10, 30, 20))
  } else {
    assert.is_nil(rawget(stdlib.table, 'pack'))
  }
})

spec('table.shallowcopy', () -> {
  local function assert_shallowcopy(t) {
    local copy = stdlib.table.shallowcopy(t)

    assert.are_not.equal(t, copy)
    assert.are.same(t, copy)

    for key, value in pairs(t) {
      assert.are.equal(value, copy[key])
    }
  }

  assert_shallowcopy({})
  assert_shallowcopy({ 1, 2, 3 })
  assert_shallowcopy({ a = 1, b = 2, c = 3 })
  assert_shallowcopy({ a = 1, 'hello' })
  assert_shallowcopy({ a = 1, b = 2, 'hello', 'world' })
  assert_shallowcopy({ { 'hello' } })
  assert_shallowcopy({ a = { 'hello' } })
  assert_shallowcopy({ a = { 'hello' }, { 'world' } })
})

spec('table.slice', () -> {
  assert.are.same({}, stdlib.table.slice({}))
  assert.are.same({ 1, 2 }, stdlib.table.slice({ 1, 2 }))
  assert.are.same({ 1, 2 }, stdlib.table.slice({ 1, 2, a = 3 }))

  assert.are.same({ 'a', 'b', 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, 1))
  assert.are.same({ 'b', 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, 2))
  assert.are.same({ 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, 3))

  assert.are.same({ 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, -1))
  assert.are.same({ 'b', 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, -2))
  assert.are.same({ 'a', 'b', 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, -3))

  assert.are.same({ 'a' }, stdlib.table.slice({ 'a', 'b', 'c' }, 1, 1))
  assert.are.same({ 'a', 'b' }, stdlib.table.slice({ 'a', 'b', 'c' }, 1, 2))
  assert.are.same({ 'b' }, stdlib.table.slice({ 'a', 'b', 'c' }, 2, 2))
  assert.are.same({ 'a', 'b', 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, 1, 3))

  assert.are.same({ 'b', 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, 2, -1))
  assert.are.same({ 'a', 'b', 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, 1, -1))
  assert.are.same({ 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, 3, -1))
  assert.are.same({ 'b', 'c' }, stdlib.table.slice({ 'a', 'b', 'c' }, -2, 3))

  assert.are.same({}, stdlib.table.slice({ 'a', 'b', 'c' }, 4))
})

spec('table.unpack', () -> {
  if _VERSION == 'Lua 5.1' {
    assert.are.equal(unpack, stdlib.table.unpack)
  } else {
    assert.is_nil(rawget(stdlib.table, 'unpack'))
  }
})

spec('table.values', () -> {
  local function assert_values(expected, t) {
    local values = stdlib.table.values(t)
    table.sort(expected, any_sort)
    table.sort(values, any_sort)
    assert.are.same(expected, values)
  }

  assert_values({}, {})
  assert_values({ 'a' }, { 'a' })
  assert_values({ 'a', 'b' }, { 'a', 'b' })
  assert_values({ 1 }, { a = 1 })
  assert_values({ 1, 2 }, { a = 1, b = 2 })
  assert_values({ 1, 'a' }, { 'a', b = 1 })
})
