function assign(t, ...) {
  for _, _t in pairs({ ... }) {
    for key, value in pairs(_t) {
      if type(key) == 'string' {
        t[key] = value
      }
    }
  }
}

function clone(t) {
  local result = {}

  for key, value in pairs(t) {
    if type(value) == 'table' {
      result[key] = clone(value)
    } else {
      result[key] = value
    }
  }

  return result
}

function copy(t) {
  local result = {}

  for key, value in pairs(t) {
    result[key] = value
  }

  return result
}

function default(t, ...) {
  for _, _t in pairs({ ... }) {
    for key, value in pairs(_t) {
      if type(key) == 'string' && t[key] == nil {
        t[key] = value
      }
    }
  }
}

function filter(t, callback) {
  local result = {}

  for key, value in pairs(t) {
    if callback(value, key) {
      if type(key) == 'number' {
        table.insert(result, value)
      } else {
        result[key] = value
      }
    }
  }

  return result
}

function find(t, callback) {
  if type(callback) == 'function' {
    for key, value in pairs(t) {
      if callback(value, key) {
        return value, key
      }
    }
  } else {
    for key, value in pairs(t) {
      if value == callback {
        return value, key
      }
    }
  }
}

function keys(t) {
  local result = {}

  for key, value in pairs(t) {
    table.insert(result, key)
  }

  return result
}

function map(t, callback) {
  local result = {}

  for key, value in pairs(t) {
    local newValue, newKey = callback(value, key)

    if newKey != nil {
      result[newKey] = newValue
    } elseif type(key) == 'number' {
      table.insert(result, newValue)
    } else {
      result[key] = newValue
    }
  }

  return result
}

function reduce(t, result, callback) {
  for key, value in pairs(t) {
    result = callback(result, value, key)
  }

  return result
}

function reverse(t) {
  local len = #t

  for i = 1, math.floor(len / 2) {
    t[i], t[len - i + 1] = t[len - i + 1], t[i]
  }
}

function slice(t, start = 0, end = #t) {
  local result, len = {}, #t

  if start < 0 { start = start + len + 1 }
  if end < 0 { end = end + len + 1 }

  for i = math.max(start, 0), math.min(end, len) {
    table.insert(result, t[i])
  }

  return result
}

function values(t) {
  local result = {}

  for key, value in pairs(t) {
    table.insert(result, value)
  }

  return result
}

return setmetatable({
  assign = assign,
  clone = clone,
  copy = copy,
  default = default,
  filter = filter,
  find = find,
  keys = keys,
  map = map,
  reduce = reduce,
  reverse = reverse,
  slice = slice,
  values = values,
}, { __index = table })
